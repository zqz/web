// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Thumbnail is an object representing the database table.
type Thumbnail struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	FileID    int       `boil:"file_id" json:"file_id" toml:"file_id" yaml:"file_id"`
	Width     int       `boil:"width" json:"width" toml:"width" yaml:"width"`
	Height    int       `boil:"height" json:"height" toml:"height" yaml:"height"`
	Hash      string    `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *thumbnailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L thumbnailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ThumbnailColumns = struct {
	ID        string
	FileID    string
	Width     string
	Height    string
	Hash      string
	CreatedAt string
}{
	ID:        "id",
	FileID:    "file_id",
	Width:     "width",
	Height:    "height",
	Hash:      "hash",
	CreatedAt: "created_at",
}

var ThumbnailTableColumns = struct {
	ID        string
	FileID    string
	Width     string
	Height    string
	Hash      string
	CreatedAt string
}{
	ID:        "thumbnails.id",
	FileID:    "thumbnails.file_id",
	Width:     "thumbnails.width",
	Height:    "thumbnails.height",
	Hash:      "thumbnails.hash",
	CreatedAt: "thumbnails.created_at",
}

// Generated where

var ThumbnailWhere = struct {
	ID        whereHelperint
	FileID    whereHelperint
	Width     whereHelperint
	Height    whereHelperint
	Hash      whereHelperstring
	CreatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"thumbnails\".\"id\""},
	FileID:    whereHelperint{field: "\"thumbnails\".\"file_id\""},
	Width:     whereHelperint{field: "\"thumbnails\".\"width\""},
	Height:    whereHelperint{field: "\"thumbnails\".\"height\""},
	Hash:      whereHelperstring{field: "\"thumbnails\".\"hash\""},
	CreatedAt: whereHelpernull_Time{field: "\"thumbnails\".\"created_at\""},
}

// ThumbnailRels is where relationship names are stored.
var ThumbnailRels = struct {
	File string
}{
	File: "File",
}

// thumbnailR is where relationships are stored.
type thumbnailR struct {
	File *File `boil:"File" json:"File" toml:"File" yaml:"File"`
}

// NewStruct creates a new relationship struct
func (*thumbnailR) NewStruct() *thumbnailR {
	return &thumbnailR{}
}

func (r *thumbnailR) GetFile() *File {
	if r == nil {
		return nil
	}
	return r.File
}

// thumbnailL is where Load methods for each relationship are stored.
type thumbnailL struct{}

var (
	thumbnailAllColumns            = []string{"id", "file_id", "width", "height", "hash", "created_at"}
	thumbnailColumnsWithoutDefault = []string{"file_id", "width", "height", "hash"}
	thumbnailColumnsWithDefault    = []string{"id", "created_at"}
	thumbnailPrimaryKeyColumns     = []string{"id"}
	thumbnailGeneratedColumns      = []string{}
)

type (
	// ThumbnailSlice is an alias for a slice of pointers to Thumbnail.
	// This should almost always be used instead of []Thumbnail.
	ThumbnailSlice []*Thumbnail
	// ThumbnailHook is the signature for custom Thumbnail hook methods
	ThumbnailHook func(context.Context, boil.ContextExecutor, *Thumbnail) error

	thumbnailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	thumbnailType                 = reflect.TypeOf(&Thumbnail{})
	thumbnailMapping              = queries.MakeStructMapping(thumbnailType)
	thumbnailPrimaryKeyMapping, _ = queries.BindMapping(thumbnailType, thumbnailMapping, thumbnailPrimaryKeyColumns)
	thumbnailInsertCacheMut       sync.RWMutex
	thumbnailInsertCache          = make(map[string]insertCache)
	thumbnailUpdateCacheMut       sync.RWMutex
	thumbnailUpdateCache          = make(map[string]updateCache)
	thumbnailUpsertCacheMut       sync.RWMutex
	thumbnailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var thumbnailAfterSelectMu sync.Mutex
var thumbnailAfterSelectHooks []ThumbnailHook

var thumbnailBeforeInsertMu sync.Mutex
var thumbnailBeforeInsertHooks []ThumbnailHook
var thumbnailAfterInsertMu sync.Mutex
var thumbnailAfterInsertHooks []ThumbnailHook

var thumbnailBeforeUpdateMu sync.Mutex
var thumbnailBeforeUpdateHooks []ThumbnailHook
var thumbnailAfterUpdateMu sync.Mutex
var thumbnailAfterUpdateHooks []ThumbnailHook

var thumbnailBeforeDeleteMu sync.Mutex
var thumbnailBeforeDeleteHooks []ThumbnailHook
var thumbnailAfterDeleteMu sync.Mutex
var thumbnailAfterDeleteHooks []ThumbnailHook

var thumbnailBeforeUpsertMu sync.Mutex
var thumbnailBeforeUpsertHooks []ThumbnailHook
var thumbnailAfterUpsertMu sync.Mutex
var thumbnailAfterUpsertHooks []ThumbnailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Thumbnail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thumbnailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Thumbnail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thumbnailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Thumbnail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thumbnailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Thumbnail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thumbnailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Thumbnail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thumbnailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Thumbnail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thumbnailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Thumbnail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thumbnailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Thumbnail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thumbnailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Thumbnail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thumbnailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddThumbnailHook registers your hook function for all future operations.
func AddThumbnailHook(hookPoint boil.HookPoint, thumbnailHook ThumbnailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		thumbnailAfterSelectMu.Lock()
		thumbnailAfterSelectHooks = append(thumbnailAfterSelectHooks, thumbnailHook)
		thumbnailAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		thumbnailBeforeInsertMu.Lock()
		thumbnailBeforeInsertHooks = append(thumbnailBeforeInsertHooks, thumbnailHook)
		thumbnailBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		thumbnailAfterInsertMu.Lock()
		thumbnailAfterInsertHooks = append(thumbnailAfterInsertHooks, thumbnailHook)
		thumbnailAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		thumbnailBeforeUpdateMu.Lock()
		thumbnailBeforeUpdateHooks = append(thumbnailBeforeUpdateHooks, thumbnailHook)
		thumbnailBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		thumbnailAfterUpdateMu.Lock()
		thumbnailAfterUpdateHooks = append(thumbnailAfterUpdateHooks, thumbnailHook)
		thumbnailAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		thumbnailBeforeDeleteMu.Lock()
		thumbnailBeforeDeleteHooks = append(thumbnailBeforeDeleteHooks, thumbnailHook)
		thumbnailBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		thumbnailAfterDeleteMu.Lock()
		thumbnailAfterDeleteHooks = append(thumbnailAfterDeleteHooks, thumbnailHook)
		thumbnailAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		thumbnailBeforeUpsertMu.Lock()
		thumbnailBeforeUpsertHooks = append(thumbnailBeforeUpsertHooks, thumbnailHook)
		thumbnailBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		thumbnailAfterUpsertMu.Lock()
		thumbnailAfterUpsertHooks = append(thumbnailAfterUpsertHooks, thumbnailHook)
		thumbnailAfterUpsertMu.Unlock()
	}
}

// One returns a single thumbnail record from the query.
func (q thumbnailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Thumbnail, error) {
	o := &Thumbnail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for thumbnails")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Thumbnail records from the query.
func (q thumbnailQuery) All(ctx context.Context, exec boil.ContextExecutor) (ThumbnailSlice, error) {
	var o []*Thumbnail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Thumbnail slice")
	}

	if len(thumbnailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Thumbnail records in the query.
func (q thumbnailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count thumbnails rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q thumbnailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if thumbnails exists")
	}

	return count > 0, nil
}

// File pointed to by the foreign key.
func (o *Thumbnail) File(mods ...qm.QueryMod) fileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FileID),
	}

	queryMods = append(queryMods, mods...)

	return Files(queryMods...)
}

// LoadFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (thumbnailL) LoadFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeThumbnail interface{}, mods queries.Applicator) error {
	var slice []*Thumbnail
	var object *Thumbnail

	if singular {
		var ok bool
		object, ok = maybeThumbnail.(*Thumbnail)
		if !ok {
			object = new(Thumbnail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeThumbnail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeThumbnail))
			}
		}
	} else {
		s, ok := maybeThumbnail.(*[]*Thumbnail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeThumbnail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeThumbnail))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &thumbnailR{}
		}
		args[object.FileID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &thumbnailR{}
			}

			args[obj.FileID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`files`),
		qm.WhereIn(`files.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load File")
	}

	var resultSlice []*File
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice File")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for files")
	}

	if len(fileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.File = foreign
		if foreign.R == nil {
			foreign.R = &fileR{}
		}
		foreign.R.Thumbnails = append(foreign.R.Thumbnails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FileID == foreign.ID {
				local.R.File = foreign
				if foreign.R == nil {
					foreign.R = &fileR{}
				}
				foreign.R.Thumbnails = append(foreign.R.Thumbnails, local)
				break
			}
		}
	}

	return nil
}

// SetFile of the thumbnail to the related item.
// Sets o.R.File to related.
// Adds o to related.R.Thumbnails.
func (o *Thumbnail) SetFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *File) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"thumbnails\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"file_id"}),
		strmangle.WhereClause("\"", "\"", 2, thumbnailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FileID = related.ID
	if o.R == nil {
		o.R = &thumbnailR{
			File: related,
		}
	} else {
		o.R.File = related
	}

	if related.R == nil {
		related.R = &fileR{
			Thumbnails: ThumbnailSlice{o},
		}
	} else {
		related.R.Thumbnails = append(related.R.Thumbnails, o)
	}

	return nil
}

// Thumbnails retrieves all the records using an executor.
func Thumbnails(mods ...qm.QueryMod) thumbnailQuery {
	mods = append(mods, qm.From("\"thumbnails\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"thumbnails\".*"})
	}

	return thumbnailQuery{q}
}

// FindThumbnail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindThumbnail(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Thumbnail, error) {
	thumbnailObj := &Thumbnail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"thumbnails\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, thumbnailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from thumbnails")
	}

	if err = thumbnailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return thumbnailObj, err
	}

	return thumbnailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Thumbnail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no thumbnails provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(thumbnailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	thumbnailInsertCacheMut.RLock()
	cache, cached := thumbnailInsertCache[key]
	thumbnailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			thumbnailAllColumns,
			thumbnailColumnsWithDefault,
			thumbnailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(thumbnailType, thumbnailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(thumbnailType, thumbnailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"thumbnails\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"thumbnails\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into thumbnails")
	}

	if !cached {
		thumbnailInsertCacheMut.Lock()
		thumbnailInsertCache[key] = cache
		thumbnailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Thumbnail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Thumbnail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	thumbnailUpdateCacheMut.RLock()
	cache, cached := thumbnailUpdateCache[key]
	thumbnailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			thumbnailAllColumns,
			thumbnailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update thumbnails, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"thumbnails\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, thumbnailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(thumbnailType, thumbnailMapping, append(wl, thumbnailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update thumbnails row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for thumbnails")
	}

	if !cached {
		thumbnailUpdateCacheMut.Lock()
		thumbnailUpdateCache[key] = cache
		thumbnailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q thumbnailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for thumbnails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for thumbnails")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ThumbnailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), thumbnailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"thumbnails\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, thumbnailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in thumbnail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all thumbnail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Thumbnail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no thumbnails provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(thumbnailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	thumbnailUpsertCacheMut.RLock()
	cache, cached := thumbnailUpsertCache[key]
	thumbnailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			thumbnailAllColumns,
			thumbnailColumnsWithDefault,
			thumbnailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			thumbnailAllColumns,
			thumbnailPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert thumbnails, could not build update column list")
		}

		ret := strmangle.SetComplement(thumbnailAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(thumbnailPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert thumbnails, could not build conflict column list")
			}

			conflict = make([]string, len(thumbnailPrimaryKeyColumns))
			copy(conflict, thumbnailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"thumbnails\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(thumbnailType, thumbnailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(thumbnailType, thumbnailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert thumbnails")
	}

	if !cached {
		thumbnailUpsertCacheMut.Lock()
		thumbnailUpsertCache[key] = cache
		thumbnailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Thumbnail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Thumbnail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Thumbnail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), thumbnailPrimaryKeyMapping)
	sql := "DELETE FROM \"thumbnails\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from thumbnails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for thumbnails")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q thumbnailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no thumbnailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from thumbnails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for thumbnails")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ThumbnailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(thumbnailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), thumbnailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"thumbnails\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, thumbnailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from thumbnail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for thumbnails")
	}

	if len(thumbnailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Thumbnail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindThumbnail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ThumbnailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ThumbnailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), thumbnailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"thumbnails\".* FROM \"thumbnails\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, thumbnailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ThumbnailSlice")
	}

	*o = slice

	return nil
}

// ThumbnailExists checks if the Thumbnail row exists.
func ThumbnailExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"thumbnails\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if thumbnails exists")
	}

	return exists, nil
}

// Exists checks if the Thumbnail row exists.
func (o *Thumbnail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ThumbnailExists(ctx, exec, o.ID)
}
