# syntax=docker/dockerfile:1

ARG NODE_VERSION=20.11.0
ARG ALPINE_VERSION=3.18

################################################################################
# Use node image for base image for all stages.
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS base

# Set working directory for all build stages.
WORKDIR /cache

################################################################################
# Create a stage for installing production dependecies.
FROM base AS deps

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.yarn to speed up subsequent builds.
# Leverage bind mounts to package.json and yarn.lock to avoid having to copy them
# into this layer.
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=cache,target=/root/.yarn \
    npm install --frozen-lockfile --ignore-scripts

################################################################################
# Create a new stage to run the application with minimal runtime dependencies
# where the necessary files are copied from the build stage.
FROM base AS final

# Run the application as a non-root user.
USER node

WORKDIR /app

# Copy package.json so that package manager commands can be used.
COPY --chown=node:node . /app
COPY --from=deps --chown=node:node /cache/node_modules /app/node_modules

# Expose the port that the application listens on.
EXPOSE 5173

# Run the application.
CMD npm run dev --host true
